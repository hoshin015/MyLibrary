//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer mycBuffer
// {
//
//   float xOffset;                     // Offset:    0 Size:     4
//   float yOffset;                     // Offset:    4 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// mycBuffer                         cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_temps 2
//
// Initial variable locations:
//   v0.x <- input.inPos.x; v0.y <- input.inPos.y; v0.z <- input.inPos.z; 
//   v1.x <- input.inTexCoord.x; v1.y <- input.inTexCoord.y; 
//   o1.x <- <main return value>.outTexCoord.x; o1.y <- <main return value>.outTexCoord.y; 
//   o0.x <- <main return value>.outPosition.x; o0.y <- <main return value>.outPosition.y; o0.z <- <main return value>.outPosition.z; o0.w <- <main return value>.outPosition.w
//
#line 23 "C:\Users\2230164\Documents\MyLibrary\vertexshader.hlsl"
add r0.x, v0.x, cb0[0].x  // r0.x <- input.inPos.x

#line 24
add r0.y, v0.y, cb0[0].y  // r0.y <- input.inPos.y

#line 25
mov r0.z, v0.z
mov r0.w, l(1.000000)
mov r0.xyzw, r0.xyzw  // r0.x <- output.outPosition.x; r0.y <- output.outPosition.y; r0.z <- output.outPosition.z; r0.w <- output.outPosition.w

#line 26
mov r1.xy, v1.xyxx  // r1.x <- output.outTexCoord.x; r1.y <- output.outTexCoord.y

#line 28
mov o0.xyzw, r0.xyzw
mov o1.xy, r1.xyxx
ret 
// Approximately 9 instruction slots used
